name: Src Code Protection

on:
  pull_request:
    branches:
      - develop
      - release
      - main
  push:
    branches:
      - release

jobs:
  check-src-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history is fetched for accurate diff comparison

      - name: Determine src/ directory changes
        id: src-changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - 'src/**'

      - name: Verify branch naming and src/ changes
        if: steps.src-changes.outputs.src == 'true'
        run: |
          # Get the branch name
          branch_name="${{ github.head_ref }}"

          # Check if branch name starts with allowed prefixes
          if [[ ! "$branch_name" =~ ^(feat/|fix/|style/|refactor/|perf/|test/).* ]]; then
            echo "Changes in src/ directory are not allowed on this branch ($branch_name)."
            echo ""
            
            # Identify added, modified, and deleted files
            added_files=$(git diff --diff-filter=A --name-only origin/${{ github.base_ref }}...HEAD | grep '^src/' || true)
            modified_files=$(git diff --diff-filter=M --name-only origin/${{ github.base_ref }}...HEAD | grep '^src/' || true)
            deleted_files=$(git diff --diff-filter=D --name-only origin/${{ github.base_ref }}...HEAD | grep '^src/' || true)

            # Display added files
            if [[ -n "$added_files" ]]; then
              echo "Added files:"
              echo "$added_files"
            fi

            # Display modified files
            if [[ -n "$modified_files" ]]; then
              echo "Modified files:"
              echo "$modified_files"
            fi

            # Display deleted files
            if [[ -n "$deleted_files" ]]; then
              echo "Deleted files:"
              echo "$deleted_files"
            fi

            echo ""
            echo "To revert these changes to their state in the base branch, you can run the following commands:"
            echo ""

            # Commands for added files
            if [[ -n "$added_files" ]]; then
              for file in $added_files; do
                echo "git rm --cached $file"
              done
            fi

            # Commands for modified files
            if [[ -n "$modified_files" ]]; then
              for file in $modified_files; do
                echo "git checkout origin/${{ github.base_ref }} -- $file"
              done
            fi

            # Commands for deleted files
            if [[ -n "$deleted_files" ]]; then
              for file in $deleted_files; do
                echo "git restore --source=origin/${{ github.base_ref }} --staged --worktree $file"
              done
            fi

            echo ""
            echo "To create a new branch with only the src/ directory changes from this branch, you can run the following commands:"
            echo ""
            echo "git checkout -b <new-branch-name> origin/${{ github.base_ref }}"
            echo "git checkout ${{ github.head_ref }} -- $(echo $added_files $modified_files | tr '\n' ' ')"
            echo "git restore --source=${{ github.head_ref }} --staged --worktree $(echo $deleted_files | tr '\n' ' ')"
            echo ""
            echo "Please ensure this complies with branch naming policies."
            exit 1
          else
            echo "Branch name starts with an allowed prefix ($branch_name). src/ changes are permitted."
          fi
