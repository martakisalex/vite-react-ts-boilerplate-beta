name: Source Code Protection

on:
  pull_request:
    branches:
      - develop
      - release
      - main
  push:
    branches:
      - release

jobs:
  check_source_code_modification:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch full history for accurate diff

      - name: Fetch latest base branch
        run: |
          echo "Fetching base branch: ${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }} --depth=1

      - name: Check if source code was modified in src/ and branch name is valid
        run: |
          branch_name="${{ github.head_ref }}"
          target_branch="${{ github.base_ref }}"

          # Define valid branch prefixes for source code changes
          valid_prefixes=("major/" "feat/" "fix/" "hotfix/" "refactor/" "test/" "style/" "perf/")

          # Check if the branch has a valid prefix for source code changes
          is_valid_prefix=false
          for prefix in "${valid_prefixes[@]}"; do
            if [[ "$branch_name" == "$prefix"* ]]; then
              is_valid_prefix=true
              break
            fi
          done

          # Check if any source files in src/ were changed by comparing FETCH_HEAD (base branch) with GITHUB_SHA
          src_files_changed=$(git diff --name-only FETCH_HEAD $GITHUB_SHA | grep -E '^src/')
          if [[ -n "$src_files_changed" && "$is_valid_prefix" == false ]]; then
            # If there are src/ changes and the branch prefix is invalid, prepare revert commands
            echo "Error: Modifications to src/ are only allowed on branches with prefixes: ${valid_prefixes[*]}."

            # Generate a soft revert command for each modified src/ file
            echo "To undo these changes and create a soft revert commit, run the following commands:"
            echo "git checkout $target_branch -- $(echo $src_files_changed | tr '\n' ' ')"  # Checkout each modified file
            echo "git commit -m 'Revert unauthorized src/ changes to match $target_branch'"  # Commit the reversion
            exit 1
          else
            echo "Branch '$branch_name' is valid for src/ changes, or no src/ files were modified."
          fi
