name: Source Code Protection

on:
  pull_request:
    branches:
      - develop
      - release
      - main
  push:
    branches:
      - release

jobs:
  check_source_code_modification:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch full history for accurate diff

      - name: Fetch latest base branch
        run: |
          echo "Fetching base branch: ${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }} --depth=1

      - name: Validate src/ changes and branch prefix
        id: validate_src
        run: |
          branch_name="${{ github.head_ref }}"
          target_branch="${{ github.base_ref }}"

          # Define valid branch prefixes for source code changes
          valid_prefixes=("major/" "feat/" "fix/" "hotfix/" "refactor/" "test/" "style/" "perf/")

          # Check if the branch has a valid prefix
          is_valid_prefix=false
          for prefix in "${valid_prefixes[@]}"; do
            if [[ "$branch_name" == "$prefix"* ]]; then
              is_valid_prefix=true
              break
            fi
          done

          # Check if any source files in src/ were changed
          src_files_changed=$(git diff --name-only FETCH_HEAD $GITHUB_SHA | grep -E '^src/')
          if [[ -n "$src_files_changed" && "$is_valid_prefix" == false ]]; then
            # Set the action output to fail if there is an unauthorized src/ modification
            echo "::set-output name=fail::true"
          else
            echo "::set-output name=fail::false"
          fi

      - name: Fail if invalid branch with src changes
        if: steps.validate_src.outputs.fail == 'true'
        run: |
          echo "Error: Unauthorized src/ modifications detected. Branch prefix must be one of: ${valid_prefixes[*]}."
          echo "To revert changes in 'src/' to match the target branch, run:"
          echo "  git checkout origin/${{ github.base_ref }} -- src/"
          exit 1
