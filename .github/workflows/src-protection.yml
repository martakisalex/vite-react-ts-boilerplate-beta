name: Src Code Protection

on:
  pull_request:
    branches:
      - develop
      - release
      - main
  push:
    branches:
      - release

jobs:
  check-src-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history is fetched for accurate diff comparison

      - name: Fetch the base branch
        run: |
          # Fetch only the specific base branch and update it locally
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}

      - name: Determine base branch and set BASE_REF
        id: determine-base
        run: |
          # Set the base branch to the pull request's base branch or main as a fallback
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BASE_REF=origin/${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          else
            echo "BASE_REF=origin/main" >> $GITHUB_ENV
          fi

      - name: Compare src/ directory changes
        id: src-changes
        run: |
          # Use the BASE_REF determined from the previous step
          echo "Comparing changes with base branch: $BASE_REF"
          
          # Identify added files in the src/ directory
          added_files=$(git diff --diff-filter=A --name-only "$BASE_REF"...HEAD | grep '^src/')
          
          # Identify modified files in the src/ directory
          modified_files=$(git diff --diff-filter=M --name-only "$BASE_REF"...HEAD | grep '^src/')
          
          # Identify deleted files in the src/ directory
          deleted_files=$(git diff --diff-filter=D --name-only "$BASE_REF"...HEAD | grep '^src/')
          
          # Combine all changed files
          all_changed_files=$(echo -e "$added_files\n$modified_files\n$deleted_files" | sort -u)
          
          if [[ -n "$all_changed_files" ]]; then
            echo "Changes found in src/ directory:"
            echo "$all_changed_files"
            # Replace newline characters with a space for environment variable compatibility
            all_changed_files_single_line=$(echo "$all_changed_files" | tr '\n' ' ')
            echo "src_changes=true" >> $GITHUB_ENV
            echo "added_files=$(echo "$added_files" | tr '\n' ' ')" >> $GITHUB_ENV
            echo "modified_files=$(echo "$modified_files" | tr '\n' ' ')" >> $GITHUB_ENV
            echo "deleted_files=$(echo "$deleted_files" | tr '\n' ' ')" >> $GITHUB_ENV
            echo "all_changed_files=$all_changed_files_single_line" >> $GITHUB_ENV
          else
            echo "No changes in src/ directory"
            echo "src_changes=false" >> $GITHUB_ENV
          fi

      - name: Display revert commands if src/ has changes
        if: env.src_changes == 'true'
        run: |
          echo "This pull request includes changes in the src/ directory."
          
          # Display added files
          if [[ -n "${{ env.added_files }}" ]]; then
            echo ""
            echo "Added files:"
            echo "${{ env.added_files }}" | tr ' ' '\n'
          fi
          
          # Display modified files
          if [[ -n "${{ env.modified_files }}" ]]; then
            echo ""
            echo "Modified files:"
            echo "${{ env.modified_files }}" | tr ' ' '\n'
          fi
          
          # Display deleted files
          if [[ -n "${{ env.deleted_files }}" ]]; then
            echo ""
            echo "Deleted files:"
            echo "${{ env.deleted_files }}" | tr ' ' '\n'
          fi
          
          echo ""
          echo "To revert these changes to their state in the base branch, you can run the following commands:"
          echo ""
          
          # Commands for added files
          if [[ -n "${{ env.added_files }}" ]]; then
            for file in ${{ env.added_files }}; do
              echo "git rm --cached $file"
            done
          fi
          
          # Commands for modified files
          if [[ -n "${{ env.modified_files }}" ]]; then
            for file in ${{ env.modified_files }}; do
              echo "git checkout ${{ env.BASE_REF }} -- $file"
            done
          fi
          
          # Commands for deleted files
          if [[ -n "${{ env.deleted_files }}" ]]; then
            for file in ${{ env.deleted_files }}; do
              echo "git checkout ${{ env.BASE_REF }} -- $file"
            done
          fi
          
          echo ""
          echo "Please ensure this complies with branch naming policies."
          exit 1
