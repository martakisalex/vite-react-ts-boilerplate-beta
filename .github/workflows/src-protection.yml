name: Source Code Protection

on:
  pull_request:
    branches:
      - develop
      - release
      - main
  push:
    branches:
      - release

jobs:
  check_source_code_modification:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch full history for accurate diff

      - name: Fetch latest base branch
        run: |
          echo "Fetching base branch: ${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }} --depth=1

      - name: Check if source code was modified in src/ and branch name is valid
        run: |
          branch_name="${{ github.head_ref }}"
          target_branch="${{ github.base_ref }}"

          # Define valid branch prefixes for source code changes
          valid_prefixes=("major/" "feat/" "fix/" "hotfix/" "refactor/" "test/" "style/" "perf/")

          # Debug: List available branches and recent commits for context
          echo "Available branches and commits:"
          git branch -a
          git log -n 5 --oneline

          # Check if any source files in src/ were changed by comparing FETCH_HEAD (base branch) with GITHUB_SHA
          source_files_changed=$(git diff --name-only FETCH_HEAD $GITHUB_SHA | grep -E '^src/')

          # Debug: Show which files are detected as modified
          echo "Modified files in src/:"
          echo "$source_files_changed"

          # Check if the branch has a valid prefix for source code changes
          is_valid_prefix=false
          for prefix in "${valid_prefixes[@]}"; do
            if [[ "$branch_name" == "$prefix"* ]]; then
              is_valid_prefix=true
              break
            fi
          done

          # Check if any modified src/ files have net changes compared to the target branch
          has_net_changes=false
          undo_commands=""
          for file in $source_files_changed; do
            if ! git diff --quiet FETCH_HEAD:$file $GITHUB_SHA:$file; then
              has_net_changes=true
              # Append each undo command for the user to execute
              undo_commands+="git checkout $target_branch -- $file\n"
            fi
          done

          # Fail if there are net changes in src/ and branch name is not allowed, print undo commands
          if [[ "$has_net_changes" == true && "$is_valid_prefix" == false ]]; then
            echo "Error: Modifications to src/ are only allowed on branches with prefixes: ${valid_prefixes[*]}."
            echo -e "To undo these changes in src/, run the following commands:\n$undo_commands"
            exit 1
          else
            echo "Branch '$branch_name' is valid for src/ changes, or no net changes in src/ files."
          fi
