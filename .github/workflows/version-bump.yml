name: Auto Version Check and Bump on PR

on:
  pull_request:
    types: [opened, synchronize]
  pull_request_target:
    types: [labeled, unlabeled]

jobs:
  version_check_and_bump:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0  # Ensures the full history is fetched for accurate diffing

      - name: Fetch develop branch
        run: git fetch origin develop:develop

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version from develop
        id: get_develop_version
        run: |
          git checkout develop
          develop_version=$(jq -r .version package.json)
          echo "develop_version=$develop_version" >> $GITHUB_ENV
          echo "Current version on develop: $develop_version"

      - name: Ensure package.json has not been manually modified
        id: check_package_json_edit
        run: |
          # Check if package.json has been modified in this pull request
          if git diff --name-only origin/develop...HEAD | grep -q '^package.json$'; then
            echo "Error: package.json has been manually edited."
            exit 1
          fi

      - name: Check branch type and version bump label requirement
        id: check_branch_type_and_label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set GH_TOKEN for GitHub CLI
        run: |
          branch_name="${{ github.head_ref }}"
          pr_labels=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')

          # Check if branch is one that requires a version bump label
          if [[ "$branch_name" =~ ^(release/|fix/|feat/|major/|hotfix/|test/|refactor/|style/) ]]; then
            if ! echo "$pr_labels" | grep -q -E 'version: major|version: minor|version: patch'; then
              echo "Error: Branch type '$branch_name' requires a version bump label (version: major, version: minor, or version: patch). Please add one of these labels."
              exit 1
            fi
          fi

      - name: Revert changes in package.json if label changed
        if: github.event_name == 'pull_request_target'
        run: |
          git checkout -- package.json

      - name: Check for version bump label
        id: check_label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Set GH_TOKEN for GitHub CLI
        run: |
          pr_labels=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
          if echo "$pr_labels" | grep -q 'version: major'; then
            version_type="major"
          elif echo "$pr_labels" | grep -q 'version: minor'; then
            version_type="minor"
          elif echo "$pr_labels" | grep -q 'version: patch'; then
            version_type="patch"
          else
            echo "Error: No version bump label found. Please add one of the following labels: version: major, version: minor, or version: patch."
            exit 1
          fi
          echo "version_type=$version_type" >> $GITHUB_ENV

      - name: Determine expected version based on label
        id: determine_version
        run: |
          current_version="${{ env.develop_version }}"
          case "${{ env.version_type }}" in
            major)
              expected_version=$(echo "$current_version" | awk -F. '{print $1+1 ".0.0"}')
              ;;
            minor)
              expected_version=$(echo "$current_version" | awk -F. '{print $1 "." $2+1 ".0"}')
              ;;
            patch)
              expected_version=$(echo "$current_version" | awk -F. '{print $1 "." $2 "." $3+1}')
              ;;
          esac
          echo "Expected version based on label: $expected_version"
          echo "expected_version=$expected_version" >> $GITHUB_ENV

      - name: Check version in package.json matches expected version
        id: check_version
        run: |
          current_version=$(jq -r .version package.json)
          echo "Version in package.json: $current_version"
          if [ "$current_version" != "${{ env.expected_version }}" ]; then
            echo "Error: package.json version is $current_version but expected ${{ env.expected_version }}."
            exit 1
          fi
          
      - name: Install dependencies
        run: npm install

      - name: Bump version with custom commit message
        if: env.expected_version != env.develop_version
        run: |
          npm version "${{ env.version_type }}" -m "chore: bump version to %s for PR"
          new_version=$(jq -r .version package.json)
          echo "New version is $new_version"
      
      - name: Push version bump commit
        if: env.expected_version != env.develop_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.head_ref }} --force
