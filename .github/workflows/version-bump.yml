name: Auto Version Validation and Bump

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

jobs:
  validate-and-bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0  # Ensures the full history is fetched for accurate diffing

      - name: Capture current version with suffix
        id: capture_old_version
        run: |
          old_version=$(jq -r .version package.json)
          echo "old_version=$old_version" >> $GITHUB_ENV
          echo "Captured old version: $old_version"

      - name: Fetch target branch (develop)
        run: git fetch origin develop:develop

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get base version without suffix from target branch
        id: get_base_version
        run: |
          git checkout develop
          target_version=$(jq -r .version package.json)
          base_version=$(echo $target_version | sed 's/-.*//')
          echo "base_version=$base_version" >> $GITHUB_ENV
          echo "Base version from develop (without suffix): $base_version"

      - name: Determine branch target and set suffix
        id: set_suffix
        run: |
          target_branch="${{ github.event.pull_request.base.ref }}"
          case "$target_branch" in
            "develop")
              suffix="-alpha"
              ;;
            "release")
              suffix="-beta"
              ;;
            "main")
              suffix=""
              ;;
            *)
              echo "Unexpected target branch: $target_branch"
              exit 1
              ;;
          esac
          echo "suffix=$suffix" >> $GITHUB_ENV

      - name: Update PR branch version to base version
        run: |
          git checkout ${{ github.head_ref }}
          jq --arg version "$base_version" '.version = $version' package.json > temp.json && mv temp.json package.json
          git add package.json
          git commit -m "chore: sync version with target branch base version" || echo "No changes to commit"

      - name: Determine if branch name requires version bump
        id: validate_branch
        run: |
          branch_name="${{ github.head_ref }}"
          if [[ "$branch_name" =~ ^(feat|fix|hotfix|style|refactor|perf|test)/ ]]; then
            echo "Branch requires version bump."
            echo "should_bump=true" >> $GITHUB_ENV
          else
            echo "Branch does not require version bump."
            echo "should_bump=false" >> $GITHUB_ENV
          fi

      - name: Verify PR label for version bump
        if: ${{ env.should_bump == 'true' }}
        id: check_label
        run: |
          pr_number=${{ github.event.pull_request.number }}
          repo_full_name=${{ github.repository }}
          labels=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$repo_full_name/issues/$pr_number/labels")

          if echo "$labels" | jq empty; then
            label_names=$(echo "$labels" | jq -r '.[].name')
            version_labels=()
            while IFS= read -r label; do
              if [[ "$label" =~ ^version:\ (major|minor|patch)$ ]]; then
                version_labels+=("$label")
              fi
            done <<< "$label_names"

            if [ ${#version_labels[@]} -eq 0 ]; then
              echo "No valid version label found. Please add a label: version: major, version: minor, or version: patch."
              exit 1
            elif [ ${#version_labels[@]} -gt 1 ]; then
              echo "Multiple version labels found: ${version_labels[@]}. Please ensure only one version label is applied."
              exit 1
            else
              case "${version_labels[0]}" in
                "version: major")
                  bump_type="major"
                  ;;
                "version: minor")
                  bump_type="minor"
                  ;;
                "version: patch")
                  bump_type="patch"
                  ;;
              esac
              echo "bump_type=$bump_type" >> $GITHUB_ENV
            fi
          else
            echo "Failed to fetch labels or invalid JSON response."
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Perform version bump with suffix
        if: ${{ env.should_bump == 'true' && env.bump_type != '' }}
        run: |
          git checkout ${{ github.head_ref }}
          
          # Bump version with npm, updating both package.json and package-lock.json
          npm version ${{ env.bump_type }} --no-git-tag-version
          bumped_version=$(jq -r .version package.json)
          
          # Add suffix to bumped version in package.json
          final_version="${bumped_version}${{ env.suffix }}"
          jq --arg version "$final_version" '.version = $version' package.json > temp.json && mv temp.json package.json
          
          # Ensure package-lock.json reflects the same version
          npm install  # This updates package-lock.json to the final version
          
          # Stage and commit the updated files with the full version in the commit message
          git add package.json package-lock.json
          git commit -m "chore: bump version from ${{ env.old_version }} to $final_version"

      - name: Push version bump commit
        if: ${{ env.should_bump == 'true' && env.bump_type != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.head_ref }}
