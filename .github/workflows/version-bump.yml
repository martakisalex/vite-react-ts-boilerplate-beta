name: Auto Version Validation and Bump

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, edited]

jobs:
  validate-and-bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0  # Ensures the full history is fetched for accurate diffing

      - name: Fetch target branch and set up Git
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:${{ github.event.pull_request.base.ref }}
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync current branch with target branch and commit
        run: |
          git checkout ${{ github.event.pull_request.base.ref }}
          git pull origin ${{ github.event.pull_request.base.ref }}
          git checkout ${{ github.head_ref }}
          git merge --no-ff ${{ github.event.pull_request.base.ref }} -m "chore: sync with target branch"
          git push origin HEAD:${{ github.head_ref }} || echo "No changes to push"

      - name: Capture and set base version
        id: capture_base_version
        run: |
          old_version=$(jq -r .version package.json)
          base_version=$(echo "$old_version" | sed 's/-.*//')
          echo "old_version=$old_version" >> $GITHUB_ENV
          echo "base_version=$base_version" >> $GITHUB_ENV

      - name: Determine suffix based on target branch
        id: set_suffix
        run: |
          case "${{ github.event.pull_request.base.ref }}" in
            "develop") suffix="-alpha" ;;
            "main") suffix="" ;;
            release/*) suffix="-beta" ;;
            *) echo "Unexpected target branch: ${{ github.event.pull_request.base.ref }}" && exit 1 ;;
          esac
          echo "suffix=$suffix" >> $GITHUB_ENV

      - name: Sync current branch version to base version and commit
        run: |
          jq --arg version "$base_version" '.version = $version' package.json > temp.json && mv temp.json package.json
          git add package.json
          git commit -m "chore: sync version to base version" || echo "No changes to commit"
          git push origin HEAD:${{ github.head_ref }}

      - name: Check PR label for bump type
        id: check_label
        run: |
          pr_number=${{ github.event.pull_request.number }}
          repo_full_name=${{ github.repository }}
          labels=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$repo_full_name/issues/$pr_number/labels")

          if echo "$labels" | jq empty; then
            label_names=$(echo "$labels" | jq -r '.[].name')
            version_labels=()
            while IFS= read -r label; do
              if [[ "$label" =~ ^version:\ (major|minor|patch)$ ]]; then
                version_labels+=("$label")
              fi
            done <<< "$label_names"

            if [ ${#version_labels[@]} -eq 0 ]; then
              echo "No version label found. Add one: version: major, version: minor, or version: patch."
              exit 1
            elif [ ${#version_labels[@]} -gt 1 ]; then
              echo "Multiple version labels found: ${version_labels[@]}. Only one is allowed."
              exit 1
            else
              case "${version_labels[0]}" in
                "version: major") bump_type="major" ;;
                "version: minor") bump_type="minor" ;;
                "version: patch") bump_type="patch" ;;
              esac
              echo "bump_type=$bump_type" >> $GITHUB_ENV
            fi
          else
            echo "Failed to fetch labels."
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Bump version based on label and add suffix, then commit
        run: |
          npm version ${{ env.bump_type }} --no-git-tag-version
          bumped_version=$(jq -r .version package.json)
          final_version="${bumped_version}${{ env.suffix }}"
          jq --arg version "$final_version" '.version = $version' package.json > temp.json && mv temp.json package.json
          npm install  # Ensure package-lock.json reflects the same version
          git add package.json package-lock.json
          git commit -m "chore: bump version to $final_version"
          git push origin HEAD:${{ github.head_ref }}

