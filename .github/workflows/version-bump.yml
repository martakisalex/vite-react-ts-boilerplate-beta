name: Auto Version Validation and Bump

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  validate-and-bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the PR branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0  # Ensures the full history is fetched for accurate diffing

      - name: Fetch develop branch
        run: git fetch origin develop:develop

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version from develop
        id: get_develop_version
        run: |
          git checkout develop
          develop_version=$(jq -r .version package.json)
          echo "develop_version=$develop_version" >> $GITHUB_ENV
          echo "Current version on develop: $develop_version"
        
      - name: Determine expected version based on branch type
        id: determine_version
        run: |
          branch_name="${{ github.head_ref }}"
          current_version="${{ env.develop_version }}"

          if [[ "$branch_name" == major/* ]]; then
            expected_version=$(echo "$current_version" | awk -F. '{print $1+1 ".0.0"}')
            bump_type="major"
          elif [[ "$branch_name" == feat/* ]]; then
            expected_version=$(echo "$current_version" | awk -F. '{print $1 "." $2+1 ".0"}')
            bump_type="minor"
          elif [[ "$branch_name" == fix/* ]]; then
            expected_version=$(echo "$current_version" | awk -F. '{print $1 "." $2 "." $3+1}')
            bump_type="patch"
          else
            expected_version="$current_version"
            bump_type=""
          fi

          echo "Expected version based on branch: $expected_version"
          echo "expected_version=$expected_version" >> $GITHUB_ENV
          echo "bump_type=$bump_type" >> $GITHUB_ENV

      - name: Check version in package.json matches expected version
        id: check_version
        run: |
          current_version=$(jq -r .version package.json)
          echo "Version in package.json: $current_version"
          if [ "$current_version" != "${{ env.expected_version }}" ]; then
            echo "Error: package.json version is $current_version but expected ${{ env.expected_version }}."
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Bump version with custom commit message
        if: ${{ env.bump_type != '' }}
        run: |
          npm version ${{ env.bump_type }} -m "chore: bump version to %s for PR"
          new_version=$(jq -r .version package.json)
          echo "New version is $new_version"
      
      - name: Push version bump commit
        if: ${{ env.bump_type != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.head_ref }} --force
