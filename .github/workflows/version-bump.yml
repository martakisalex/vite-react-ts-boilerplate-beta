name: Auto Version Validation and Bump

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, edited]

jobs:
  validate-and-bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the PR branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensures the full history is fetched for accurate diffing

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine target branch and set suffix
        id: set_suffix
        run: |
          target_branch="${{ github.event.pull_request.base.ref }}"
          case "$target_branch" in
            "develop")
              suffix="-alpha"
              ;;
            "main")
              suffix=""
              ;;
            *)
              echo "Unexpected target branch: $target_branch"
              exit 1
              ;;
          esac
          echo "suffix=$suffix" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Determine bump type from PR labels
        id: determine_bump_type
        run: |
          pr_number=${{ github.event.pull_request.number }}
          repo_full_name=${{ github.repository }}
          labels=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$repo_full_name/issues/$pr_number/labels")

          bump_type=""
          if echo "$labels" | jq empty; then
            label_names=$(echo "$labels" | jq -r '.[].name')
            while IFS= read -r label; do
              case "$label" in
                "version: major")
                  bump_type="major"
                  ;;
                "version: minor")
                  bump_type="minor"
                  ;;
                "version: patch")
                  bump_type="patch"
                  ;;
              esac
            done <<< "$label_names"
          fi

          if [ -z "$bump_type" ]; then
            echo "No valid version label found (major, minor, or patch)."
            exit 1
          fi

          echo "bump_type=$bump_type" >> $GITHUB_ENV

      - name: Perform version bump and apply suffix
        if: ${{ github.head_ref.startsWith('release/') }}
        run: |
          # Bump the version in package.json based on the label
          npm version ${{ env.bump_type }} --no-git-tag-version
          bumped_version=$(jq -r .version package.json)

          # Apply suffix based on the target branch
          final_version="${bumped_version}${{ env.suffix }}"
          jq --arg version "$final_version" '.version = $version' package.json > temp.json && mv temp.json package.json

          # Ensure package-lock.json reflects the updated version
          npm install  # Updates package-lock.json to the final version

          # Stage and commit the updated files with the full version in the commit message
          git add package.json package-lock.json
          git commit -m "chore: bump version to $final_version based on target branch suffix"

      - name: Push version bump commit to PR branch
        if: ${{ github.head_ref.startsWith('release/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${{ github.head_ref }}
